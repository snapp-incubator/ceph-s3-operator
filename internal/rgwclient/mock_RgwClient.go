// Code generated by mockery v2.32.0. DO NOT EDIT.

package rgwclient

import (
	context "context"

	admin "github.com/ceph/go-ceph/rgw/admin"

	mock "github.com/stretchr/testify/mock"
)

// MockRgwClient is an autogenerated mock type for the RgwClient type
type MockRgwClient struct {
	mock.Mock
}

type MockRgwClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRgwClient) EXPECT() *MockRgwClient_Expecter {
	return &MockRgwClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockRgwClient) CreateUser(ctx context.Context, user *admin.User) (*admin.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *admin.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.User) (*admin.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.User) *admin.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRgwClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockRgwClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *admin.User
func (_e *MockRgwClient_Expecter) CreateUser(ctx interface{}, user interface{}) *MockRgwClient_CreateUser_Call {
	return &MockRgwClient_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockRgwClient_CreateUser_Call) Run(run func(ctx context.Context, user *admin.User)) *MockRgwClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.User))
	})
	return _c
}

func (_c *MockRgwClient_CreateUser_Call) Return(_a0 *admin.User, _a1 error) *MockRgwClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRgwClient_CreateUser_Call) RunAndReturn(run func(context.Context, *admin.User) (*admin.User, error)) *MockRgwClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuota provides a mock function with given fields: ctx, quotaSpec
func (_m *MockRgwClient) GetQuota(ctx context.Context, quotaSpec *admin.QuotaSpec) (*admin.QuotaSpec, error) {
	ret := _m.Called(ctx, quotaSpec)

	var r0 *admin.QuotaSpec
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.QuotaSpec) (*admin.QuotaSpec, error)); ok {
		return rf(ctx, quotaSpec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.QuotaSpec) *admin.QuotaSpec); ok {
		r0 = rf(ctx, quotaSpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.QuotaSpec)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.QuotaSpec) error); ok {
		r1 = rf(ctx, quotaSpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRgwClient_GetQuota_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuota'
type MockRgwClient_GetQuota_Call struct {
	*mock.Call
}

// GetQuota is a helper method to define mock.On call
//   - ctx context.Context
//   - quotaSpec *admin.QuotaSpec
func (_e *MockRgwClient_Expecter) GetQuota(ctx interface{}, quotaSpec interface{}) *MockRgwClient_GetQuota_Call {
	return &MockRgwClient_GetQuota_Call{Call: _e.mock.On("GetQuota", ctx, quotaSpec)}
}

func (_c *MockRgwClient_GetQuota_Call) Run(run func(ctx context.Context, quotaSpec *admin.QuotaSpec)) *MockRgwClient_GetQuota_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.QuotaSpec))
	})
	return _c
}

func (_c *MockRgwClient_GetQuota_Call) Return(_a0 *admin.QuotaSpec, _a1 error) *MockRgwClient_GetQuota_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRgwClient_GetQuota_Call) RunAndReturn(run func(context.Context, *admin.QuotaSpec) (*admin.QuotaSpec, error)) *MockRgwClient_GetQuota_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, user
func (_m *MockRgwClient) GetUser(ctx context.Context, user *admin.User) (*admin.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *admin.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.User) (*admin.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.User) *admin.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRgwClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockRgwClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *admin.User
func (_e *MockRgwClient_Expecter) GetUser(ctx interface{}, user interface{}) *MockRgwClient_GetUser_Call {
	return &MockRgwClient_GetUser_Call{Call: _e.mock.On("GetUser", ctx, user)}
}

func (_c *MockRgwClient_GetUser_Call) Run(run func(ctx context.Context, user *admin.User)) *MockRgwClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.User))
	})
	return _c
}

func (_c *MockRgwClient_GetUser_Call) Return(_a0 *admin.User, _a1 error) *MockRgwClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRgwClient_GetUser_Call) RunAndReturn(run func(context.Context, *admin.User) (*admin.User, error)) *MockRgwClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetQuota provides a mock function with given fields: ctx, quotaSpec
func (_m *MockRgwClient) SetQuota(ctx context.Context, quotaSpec *admin.QuotaSpec) error {
	ret := _m.Called(ctx, quotaSpec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.QuotaSpec) error); ok {
		r0 = rf(ctx, quotaSpec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRgwClient_SetQuota_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetQuota'
type MockRgwClient_SetQuota_Call struct {
	*mock.Call
}

// SetQuota is a helper method to define mock.On call
//   - ctx context.Context
//   - quotaSpec *admin.QuotaSpec
func (_e *MockRgwClient_Expecter) SetQuota(ctx interface{}, quotaSpec interface{}) *MockRgwClient_SetQuota_Call {
	return &MockRgwClient_SetQuota_Call{Call: _e.mock.On("SetQuota", ctx, quotaSpec)}
}

func (_c *MockRgwClient_SetQuota_Call) Run(run func(ctx context.Context, quotaSpec *admin.QuotaSpec)) *MockRgwClient_SetQuota_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.QuotaSpec))
	})
	return _c
}

func (_c *MockRgwClient_SetQuota_Call) Return(_a0 error) *MockRgwClient_SetQuota_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRgwClient_SetQuota_Call) RunAndReturn(run func(context.Context, *admin.QuotaSpec) error) *MockRgwClient_SetQuota_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRgwClient creates a new instance of MockRgwClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRgwClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRgwClient {
	mock := &MockRgwClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
